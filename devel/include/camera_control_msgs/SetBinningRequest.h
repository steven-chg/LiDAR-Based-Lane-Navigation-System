// Generated by gencpp from file camera_control_msgs/SetBinningRequest.msg
// DO NOT EDIT!


#ifndef CAMERA_CONTROL_MSGS_MESSAGE_SETBINNINGREQUEST_H
#define CAMERA_CONTROL_MSGS_MESSAGE_SETBINNINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera_control_msgs
{
template <class ContainerAllocator>
struct SetBinningRequest_
{
  typedef SetBinningRequest_<ContainerAllocator> Type;

  SetBinningRequest_()
    : target_binning_x(0)
    , target_binning_y(0)  {
    }
  SetBinningRequest_(const ContainerAllocator& _alloc)
    : target_binning_x(0)
    , target_binning_y(0)  {
  (void)_alloc;
    }



   typedef uint32_t _target_binning_x_type;
  _target_binning_x_type target_binning_x;

   typedef uint32_t _target_binning_y_type;
  _target_binning_y_type target_binning_y;





  typedef boost::shared_ptr< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetBinningRequest_

typedef ::camera_control_msgs::SetBinningRequest_<std::allocator<void> > SetBinningRequest;

typedef boost::shared_ptr< ::camera_control_msgs::SetBinningRequest > SetBinningRequestPtr;
typedef boost::shared_ptr< ::camera_control_msgs::SetBinningRequest const> SetBinningRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator1> & lhs, const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_binning_x == rhs.target_binning_x &&
    lhs.target_binning_y == rhs.target_binning_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator1> & lhs, const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "070d3ce2d671acce3b96edb95ae60995";
  }

  static const char* value(const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x070d3ce2d671acceULL;
  static const uint64_t static_value2 = 0x3b96edb95ae60995ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_control_msgs/SetBinningRequest";
  }

  static const char* value(const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Binning factor to get downsampled images. It refers here to any camera\n"
"# setting which combines rectangular neighborhoods of pixels into larger\n"
"# \"super-pixels.\" It reduces the resolution of the output image to\n"
"# (width / binning_x) x (height / binning_y).\n"
"# The default values binning_x = binning_y = 0 are considered the same\n"
"# as binning_x = binning_y = 1 (no subsampling).\n"
"# Calling this service with target binning values will change the binning entry\n"
"# in the published camera_info_msg\n"
"uint32 target_binning_x\n"
"uint32 target_binning_y\n"
"\n"
;
  }

  static const char* value(const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_binning_x);
      stream.next(m.target_binning_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetBinningRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_control_msgs::SetBinningRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_control_msgs::SetBinningRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_binning_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.target_binning_x);
    s << indent << "target_binning_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.target_binning_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_CONTROL_MSGS_MESSAGE_SETBINNINGREQUEST_H
