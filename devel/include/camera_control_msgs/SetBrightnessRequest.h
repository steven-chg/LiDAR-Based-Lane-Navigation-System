// Generated by gencpp from file camera_control_msgs/SetBrightnessRequest.msg
// DO NOT EDIT!


#ifndef CAMERA_CONTROL_MSGS_MESSAGE_SETBRIGHTNESSREQUEST_H
#define CAMERA_CONTROL_MSGS_MESSAGE_SETBRIGHTNESSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera_control_msgs
{
template <class ContainerAllocator>
struct SetBrightnessRequest_
{
  typedef SetBrightnessRequest_<ContainerAllocator> Type;

  SetBrightnessRequest_()
    : target_brightness(0)
    , brightness_continuous(false)
    , exposure_auto(false)
    , gain_auto(false)  {
    }
  SetBrightnessRequest_(const ContainerAllocator& _alloc)
    : target_brightness(0)
    , brightness_continuous(false)
    , exposure_auto(false)
    , gain_auto(false)  {
  (void)_alloc;
    }



   typedef int32_t _target_brightness_type;
  _target_brightness_type target_brightness;

   typedef uint8_t _brightness_continuous_type;
  _brightness_continuous_type brightness_continuous;

   typedef uint8_t _exposure_auto_type;
  _exposure_auto_type exposure_auto;

   typedef uint8_t _gain_auto_type;
  _gain_auto_type gain_auto;





  typedef boost::shared_ptr< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetBrightnessRequest_

typedef ::camera_control_msgs::SetBrightnessRequest_<std::allocator<void> > SetBrightnessRequest;

typedef boost::shared_ptr< ::camera_control_msgs::SetBrightnessRequest > SetBrightnessRequestPtr;
typedef boost::shared_ptr< ::camera_control_msgs::SetBrightnessRequest const> SetBrightnessRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator1> & lhs, const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator2> & rhs)
{
  return lhs.target_brightness == rhs.target_brightness &&
    lhs.brightness_continuous == rhs.brightness_continuous &&
    lhs.exposure_auto == rhs.exposure_auto &&
    lhs.gain_auto == rhs.gain_auto;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator1> & lhs, const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace camera_control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f8cc426d8d4e41959f6306162a714c3";
  }

  static const char* value(const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f8cc426d8d4e419ULL;
  static const uint64_t static_value2 = 0x59f6306162a714c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_control_msgs/SetBrightnessRequest";
  }

  static const char* value(const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The target brightness, which is average intensity values of the images.\n"
"# It depends the exposure time as well as the gain setting.\n"
"int32 target_brightness\n"
"\n"
"# The brightness_continuous flag controls the auto brightness function.\n"
"# If it is set to false, the given brightness will only be reached once.\n"
"# Hence changing light conditions lead to changing brightness values.\n"
"# If it is set to true, the given brightness will be reached continuously,\n"
"# trying to adapt to changing light conditions. The 'brightness_contunuous'\n"
"# mode is is only possible for values in the possible auto range of the arena\n"
"# API which is e.g. [50 - 205] for acA2500-14um and acA1920-40gm\n"
"bool brightness_continuous\n"
"\n"
"# If the camera should try reach or keep the desired brightness, hence adapting\n"
"# to changing light conditions, at least one of the following flags MUST be set.\n"
"# If both are set, the interface will use the profile that tries to keep the\n"
"# gain at minimum to reduce white noise.\n"
"# 'exposure_auto' will adapt the exposure time to reach the brightness, wheras\n"
"# 'gain_auto' does so by adapting the gain.\n"
"bool exposure_auto\n"
"bool gain_auto\n"
"\n"
;
  }

  static const char* value(const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_brightness);
      stream.next(m.brightness_continuous);
      stream.next(m.exposure_auto);
      stream.next(m.gain_auto);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetBrightnessRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_control_msgs::SetBrightnessRequest_<ContainerAllocator>& v)
  {
    s << indent << "target_brightness: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_brightness);
    s << indent << "brightness_continuous: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brightness_continuous);
    s << indent << "exposure_auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exposure_auto);
    s << indent << "gain_auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gain_auto);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_CONTROL_MSGS_MESSAGE_SETBRIGHTNESSREQUEST_H
