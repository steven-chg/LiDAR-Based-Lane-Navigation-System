// Generated by gencpp from file septentrio_gnss_driver/MeasEpoch.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_MEASEPOCH_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_MEASEPOCH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <septentrio_gnss_driver/BlockHeader.h>
#include <septentrio_gnss_driver/MeasEpochChannelType1.h>

namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct MeasEpoch_
{
  typedef MeasEpoch_<ContainerAllocator> Type;

  MeasEpoch_()
    : header()
    , block_header()
    , n(0)
    , sb1_length(0)
    , sb2_length(0)
    , common_flags(0)
    , cum_clk_jumps(0)
    , type1()  {
    }
  MeasEpoch_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , block_header(_alloc)
    , n(0)
    , sb1_length(0)
    , sb2_length(0)
    , common_flags(0)
    , cum_clk_jumps(0)
    , type1(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>  _block_header_type;
  _block_header_type block_header;

   typedef uint8_t _n_type;
  _n_type n;

   typedef uint8_t _sb1_length_type;
  _sb1_length_type sb1_length;

   typedef uint8_t _sb2_length_type;
  _sb2_length_type sb2_length;

   typedef uint8_t _common_flags_type;
  _common_flags_type common_flags;

   typedef uint8_t _cum_clk_jumps_type;
  _cum_clk_jumps_type cum_clk_jumps;

   typedef std::vector< ::septentrio_gnss_driver::MeasEpochChannelType1_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::septentrio_gnss_driver::MeasEpochChannelType1_<ContainerAllocator> >> _type1_type;
  _type1_type type1;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> const> ConstPtr;

}; // struct MeasEpoch_

typedef ::septentrio_gnss_driver::MeasEpoch_<std::allocator<void> > MeasEpoch;

typedef boost::shared_ptr< ::septentrio_gnss_driver::MeasEpoch > MeasEpochPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::MeasEpoch const> MeasEpochConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.block_header == rhs.block_header &&
    lhs.n == rhs.n &&
    lhs.sb1_length == rhs.sb1_length &&
    lhs.sb2_length == rhs.sb2_length &&
    lhs.common_flags == rhs.common_flags &&
    lhs.cum_clk_jumps == rhs.cum_clk_jumps &&
    lhs.type1 == rhs.type1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cf9a1d78edfe10d2a772f4a50dd0645";
  }

  static const char* value(const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cf9a1d78edfe10dULL;
  static const uint64_t static_value2 = 0x2a772f4a50dd0645ULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/MeasEpoch";
  }

  static const char* value(const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MeasEpoch block\n"
"# ROS message header\n"
"std_msgs/Header header\n"
"\n"
"# SBF block header including time header\n"
"BlockHeader  block_header   \n"
"\n"
"uint8 n\n"
"uint8 sb1_length\n"
"uint8 sb2_length      \n"
"uint8 common_flags\n"
"uint8 cum_clk_jumps # 0.001 s\n"
"\n"
"MeasEpochChannelType1[] type1\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: septentrio_gnss_driver/BlockHeader\n"
"# Blockheader including time header for all ROS messages that publish SBF blocks\n"
"\n"
"uint8     sync_1\n"
"uint8     sync_2\n"
"uint16    crc\n"
"uint16    id\n"
"uint8     revision\n"
"uint16    length\n"
"\n"
"uint32    tow # ms since week start\n"
"uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     \n"
"================================================================================\n"
"MSG: septentrio_gnss_driver/MeasEpochChannelType1\n"
"# MeasEpochChannelType1 block\n"
"   \n"
"uint8  rx_channel\n"
"uint8  type\n"
"uint8  sv_id\n"
"uint8  misc        # 4294967.296 m\n"
"uint32 code_lsb    # 0.001 m\n"
"int32  doppler     # 0.0001 Hz\n"
"uint16 carrier_lsb # 0.001 cycles\n"
"int8   carrier_msb # 65.536 cycles\n"
"uint8  cn0         # 0.25 dB-Hz\n"
"uint16 lock_time\n"
"uint8  obs_info\n"
"uint8  n2\n"
"\n"
"MeasEpochChannelType2[] type2\n"
"================================================================================\n"
"MSG: septentrio_gnss_driver/MeasEpochChannelType2\n"
"# MeasEpochChannelType2 block\n"
"   \n"
"uint8  type\n"
"uint8  lock_time          # s\n"
"uint8  cn0                # 0.25 dB-Hz\n"
"uint8  offsets_msb        # 65.536 m or 65.536 Hz\n"
"int8   carrier_msb        # 65.536 cycles\n"
"uint8  obs_info\n"
"uint16 code_offset_lsb    # 0.001 m\n"
"uint16 carrier_lsb        # 0.001 cycles\n"
"uint16 doppler_offset_lsb # 0.0001 Hz\n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.block_header);
      stream.next(m.n);
      stream.next(m.sb1_length);
      stream.next(m.sb2_length);
      stream.next(m.common_flags);
      stream.next(m.cum_clk_jumps);
      stream.next(m.type1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MeasEpoch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::MeasEpoch_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "block_header: ";
    s << std::endl;
    Printer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.block_header);
    s << indent << "n: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n);
    s << indent << "sb1_length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sb1_length);
    s << indent << "sb2_length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sb2_length);
    s << indent << "common_flags: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.common_flags);
    s << indent << "cum_clk_jumps: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cum_clk_jumps);
    s << indent << "type1[]" << std::endl;
    for (size_t i = 0; i < v.type1.size(); ++i)
    {
      s << indent << "  type1[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::septentrio_gnss_driver::MeasEpochChannelType1_<ContainerAllocator> >::stream(s, indent + "    ", v.type1[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_MEASEPOCH_H
