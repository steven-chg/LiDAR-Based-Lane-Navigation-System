// Generated by gencpp from file septentrio_gnss_driver/RFBand.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_RFBAND_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_RFBAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct RFBand_
{
  typedef RFBand_<ContainerAllocator> Type;

  RFBand_()
    : frequency(0)
    , bandwidth(0)
    , info(0)  {
    }
  RFBand_(const ContainerAllocator& _alloc)
    : frequency(0)
    , bandwidth(0)
    , info(0)  {
  (void)_alloc;
    }



   typedef uint32_t _frequency_type;
  _frequency_type frequency;

   typedef uint16_t _bandwidth_type;
  _bandwidth_type bandwidth;

   typedef uint8_t _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> const> ConstPtr;

}; // struct RFBand_

typedef ::septentrio_gnss_driver::RFBand_<std::allocator<void> > RFBand;

typedef boost::shared_ptr< ::septentrio_gnss_driver::RFBand > RFBandPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::RFBand const> RFBandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::RFBand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::RFBand_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::RFBand_<ContainerAllocator2> & rhs)
{
  return lhs.frequency == rhs.frequency &&
    lhs.bandwidth == rhs.bandwidth &&
    lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::RFBand_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::RFBand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "987cd35fc563b11daae475e3e9a37fd6";
  }

  static const char* value(const ::septentrio_gnss_driver::RFBand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x987cd35fc563b11dULL;
  static const uint64_t static_value2 = 0xaae475e3e9a37fd6ULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/RFBand";
  }

  static const char* value(const ::septentrio_gnss_driver::RFBand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# RFband block\n"
"\n"
"uint32 frequency # Hz\n"
"uint16 bandwidth # kHz\n"
"uint8  info\n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::RFBand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frequency);
      stream.next(m.bandwidth);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RFBand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::RFBand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::RFBand_<ContainerAllocator>& v)
  {
    s << indent << "frequency: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "bandwidth: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.bandwidth);
    s << indent << "info: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_RFBAND_H
