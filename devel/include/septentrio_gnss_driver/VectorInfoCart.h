// Generated by gencpp from file septentrio_gnss_driver/VectorInfoCart.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_VECTORINFOCART_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_VECTORINFOCART_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct VectorInfoCart_
{
  typedef VectorInfoCart_<ContainerAllocator> Type;

  VectorInfoCart_()
    : nr_sv(0)
    , error(0)
    , mode(0)
    , misc(0)
    , delta_x(0.0)
    , delta_y(0.0)
    , delta_z(0.0)
    , delta_vx(0.0)
    , delta_vy(0.0)
    , delta_vz(0.0)
    , azimuth(0)
    , elevation(0)
    , reference_id(0)
    , corr_age(0)
    , signal_info(0)  {
    }
  VectorInfoCart_(const ContainerAllocator& _alloc)
    : nr_sv(0)
    , error(0)
    , mode(0)
    , misc(0)
    , delta_x(0.0)
    , delta_y(0.0)
    , delta_z(0.0)
    , delta_vx(0.0)
    , delta_vy(0.0)
    , delta_vz(0.0)
    , azimuth(0)
    , elevation(0)
    , reference_id(0)
    , corr_age(0)
    , signal_info(0)  {
  (void)_alloc;
    }



   typedef uint8_t _nr_sv_type;
  _nr_sv_type nr_sv;

   typedef uint8_t _error_type;
  _error_type error;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _misc_type;
  _misc_type misc;

   typedef double _delta_x_type;
  _delta_x_type delta_x;

   typedef double _delta_y_type;
  _delta_y_type delta_y;

   typedef double _delta_z_type;
  _delta_z_type delta_z;

   typedef float _delta_vx_type;
  _delta_vx_type delta_vx;

   typedef float _delta_vy_type;
  _delta_vy_type delta_vy;

   typedef float _delta_vz_type;
  _delta_vz_type delta_vz;

   typedef uint16_t _azimuth_type;
  _azimuth_type azimuth;

   typedef int16_t _elevation_type;
  _elevation_type elevation;

   typedef uint16_t _reference_id_type;
  _reference_id_type reference_id;

   typedef uint16_t _corr_age_type;
  _corr_age_type corr_age;

   typedef uint32_t _signal_info_type;
  _signal_info_type signal_info;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> const> ConstPtr;

}; // struct VectorInfoCart_

typedef ::septentrio_gnss_driver::VectorInfoCart_<std::allocator<void> > VectorInfoCart;

typedef boost::shared_ptr< ::septentrio_gnss_driver::VectorInfoCart > VectorInfoCartPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::VectorInfoCart const> VectorInfoCartConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator2> & rhs)
{
  return lhs.nr_sv == rhs.nr_sv &&
    lhs.error == rhs.error &&
    lhs.mode == rhs.mode &&
    lhs.misc == rhs.misc &&
    lhs.delta_x == rhs.delta_x &&
    lhs.delta_y == rhs.delta_y &&
    lhs.delta_z == rhs.delta_z &&
    lhs.delta_vx == rhs.delta_vx &&
    lhs.delta_vy == rhs.delta_vy &&
    lhs.delta_vz == rhs.delta_vz &&
    lhs.azimuth == rhs.azimuth &&
    lhs.elevation == rhs.elevation &&
    lhs.reference_id == rhs.reference_id &&
    lhs.corr_age == rhs.corr_age &&
    lhs.signal_info == rhs.signal_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d072946ecd7f4319790a07cf534d27c3";
  }

  static const char* value(const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd072946ecd7f4319ULL;
  static const uint64_t static_value2 = 0x790a07cf534d27c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/VectorInfoCart";
  }

  static const char* value(const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# VectorInfoCart block\n"
"   \n"
"uint8   nr_sv\n"
"uint8   error\n"
"uint8   mode\n"
"uint8   misc\n"
"float64 delta_x      # m\n"
"float64 delta_y      # m\n"
"float64 delta_z      # m\n"
"float32 delta_vx     # m\n"
"float32 delta_vy     # m\n"
"float32 delta_vz     # m\n"
"uint16  azimuth      # 0.01 deg\n"
"int16   elevation    # 0.01 deg\n"
"uint16  reference_id\n"
"uint16  corr_age     # 0.01 s\n"
"uint32  signal_info\n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nr_sv);
      stream.next(m.error);
      stream.next(m.mode);
      stream.next(m.misc);
      stream.next(m.delta_x);
      stream.next(m.delta_y);
      stream.next(m.delta_z);
      stream.next(m.delta_vx);
      stream.next(m.delta_vy);
      stream.next(m.delta_vz);
      stream.next(m.azimuth);
      stream.next(m.elevation);
      stream.next(m.reference_id);
      stream.next(m.corr_age);
      stream.next(m.signal_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VectorInfoCart_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::VectorInfoCart_<ContainerAllocator>& v)
  {
    s << indent << "nr_sv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nr_sv);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "misc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.misc);
    s << indent << "delta_x: ";
    Printer<double>::stream(s, indent + "  ", v.delta_x);
    s << indent << "delta_y: ";
    Printer<double>::stream(s, indent + "  ", v.delta_y);
    s << indent << "delta_z: ";
    Printer<double>::stream(s, indent + "  ", v.delta_z);
    s << indent << "delta_vx: ";
    Printer<float>::stream(s, indent + "  ", v.delta_vx);
    s << indent << "delta_vy: ";
    Printer<float>::stream(s, indent + "  ", v.delta_vy);
    s << indent << "delta_vz: ";
    Printer<float>::stream(s, indent + "  ", v.delta_vz);
    s << indent << "azimuth: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.azimuth);
    s << indent << "elevation: ";
    Printer<int16_t>::stream(s, indent + "  ", v.elevation);
    s << indent << "reference_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.reference_id);
    s << indent << "corr_age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.corr_age);
    s << indent << "signal_info: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.signal_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_VECTORINFOCART_H
