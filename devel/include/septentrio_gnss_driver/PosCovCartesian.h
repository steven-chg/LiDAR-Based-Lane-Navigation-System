// Generated by gencpp from file septentrio_gnss_driver/PosCovCartesian.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_POSCOVCARTESIAN_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_POSCOVCARTESIAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <septentrio_gnss_driver/BlockHeader.h>

namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct PosCovCartesian_
{
  typedef PosCovCartesian_<ContainerAllocator> Type;

  PosCovCartesian_()
    : header()
    , block_header()
    , mode(0)
    , error(0)
    , cov_xx(0.0)
    , cov_yy(0.0)
    , cov_zz(0.0)
    , cov_bb(0.0)
    , cov_xy(0.0)
    , cov_xz(0.0)
    , cov_xb(0.0)
    , cov_yz(0.0)
    , cov_yb(0.0)
    , cov_zb(0.0)  {
    }
  PosCovCartesian_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , block_header(_alloc)
    , mode(0)
    , error(0)
    , cov_xx(0.0)
    , cov_yy(0.0)
    , cov_zz(0.0)
    , cov_bb(0.0)
    , cov_xy(0.0)
    , cov_xz(0.0)
    , cov_xb(0.0)
    , cov_yz(0.0)
    , cov_yb(0.0)
    , cov_zb(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>  _block_header_type;
  _block_header_type block_header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _error_type;
  _error_type error;

   typedef float _cov_xx_type;
  _cov_xx_type cov_xx;

   typedef float _cov_yy_type;
  _cov_yy_type cov_yy;

   typedef float _cov_zz_type;
  _cov_zz_type cov_zz;

   typedef float _cov_bb_type;
  _cov_bb_type cov_bb;

   typedef float _cov_xy_type;
  _cov_xy_type cov_xy;

   typedef float _cov_xz_type;
  _cov_xz_type cov_xz;

   typedef float _cov_xb_type;
  _cov_xb_type cov_xb;

   typedef float _cov_yz_type;
  _cov_yz_type cov_yz;

   typedef float _cov_yb_type;
  _cov_yb_type cov_yb;

   typedef float _cov_zb_type;
  _cov_zb_type cov_zb;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> const> ConstPtr;

}; // struct PosCovCartesian_

typedef ::septentrio_gnss_driver::PosCovCartesian_<std::allocator<void> > PosCovCartesian;

typedef boost::shared_ptr< ::septentrio_gnss_driver::PosCovCartesian > PosCovCartesianPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::PosCovCartesian const> PosCovCartesianConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.block_header == rhs.block_header &&
    lhs.mode == rhs.mode &&
    lhs.error == rhs.error &&
    lhs.cov_xx == rhs.cov_xx &&
    lhs.cov_yy == rhs.cov_yy &&
    lhs.cov_zz == rhs.cov_zz &&
    lhs.cov_bb == rhs.cov_bb &&
    lhs.cov_xy == rhs.cov_xy &&
    lhs.cov_xz == rhs.cov_xz &&
    lhs.cov_xb == rhs.cov_xb &&
    lhs.cov_yz == rhs.cov_yz &&
    lhs.cov_yb == rhs.cov_yb &&
    lhs.cov_zb == rhs.cov_zb;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f9c694efd927f0282537b2693bfa92f";
  }

  static const char* value(const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f9c694efd927f02ULL;
  static const uint64_t static_value2 = 0x82537b2693bfa92fULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/PosCovCartesian";
  }

  static const char* value(const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# PVTGeodetic block\n"
"# ROS message header\n"
"std_msgs/Header header\n"
"\n"
"# SBF block header including time header\n"
"BlockHeader  block_header   \n"
"\n"
"uint8        mode\n"
"uint8        error        \n"
"float32      cov_xx # m^2\n"
"float32      cov_yy # m^2\n"
"float32      cov_zz # m^2\n"
"float32      cov_bb # m^2\n"
"float32      cov_xy # m^2\n"
"float32      cov_xz # m^2\n"
"float32      cov_xb # m^2\n"
"float32      cov_yz # m^2\n"
"float32      cov_yb # m^2\n"
"float32      cov_zb # m^2\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: septentrio_gnss_driver/BlockHeader\n"
"# Blockheader including time header for all ROS messages that publish SBF blocks\n"
"\n"
"uint8     sync_1\n"
"uint8     sync_2\n"
"uint16    crc\n"
"uint16    id\n"
"uint8     revision\n"
"uint16    length\n"
"\n"
"uint32    tow # ms since week start\n"
"uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     \n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.block_header);
      stream.next(m.mode);
      stream.next(m.error);
      stream.next(m.cov_xx);
      stream.next(m.cov_yy);
      stream.next(m.cov_zz);
      stream.next(m.cov_bb);
      stream.next(m.cov_xy);
      stream.next(m.cov_xz);
      stream.next(m.cov_xb);
      stream.next(m.cov_yz);
      stream.next(m.cov_yb);
      stream.next(m.cov_zb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosCovCartesian_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::PosCovCartesian_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "block_header: ";
    s << std::endl;
    Printer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.block_header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "cov_xx: ";
    Printer<float>::stream(s, indent + "  ", v.cov_xx);
    s << indent << "cov_yy: ";
    Printer<float>::stream(s, indent + "  ", v.cov_yy);
    s << indent << "cov_zz: ";
    Printer<float>::stream(s, indent + "  ", v.cov_zz);
    s << indent << "cov_bb: ";
    Printer<float>::stream(s, indent + "  ", v.cov_bb);
    s << indent << "cov_xy: ";
    Printer<float>::stream(s, indent + "  ", v.cov_xy);
    s << indent << "cov_xz: ";
    Printer<float>::stream(s, indent + "  ", v.cov_xz);
    s << indent << "cov_xb: ";
    Printer<float>::stream(s, indent + "  ", v.cov_xb);
    s << indent << "cov_yz: ";
    Printer<float>::stream(s, indent + "  ", v.cov_yz);
    s << indent << "cov_yb: ";
    Printer<float>::stream(s, indent + "  ", v.cov_yb);
    s << indent << "cov_zb: ";
    Printer<float>::stream(s, indent + "  ", v.cov_zb);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_POSCOVCARTESIAN_H
