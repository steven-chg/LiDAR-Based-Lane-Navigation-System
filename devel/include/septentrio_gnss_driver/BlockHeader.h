// Generated by gencpp from file septentrio_gnss_driver/BlockHeader.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <septentrio_gnss_driver/plugin/BlockHeader.h>

namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct BlockHeader_
{
  typedef BlockHeader_<ContainerAllocator> Type;

#ifdef SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_CONSTRUCTOR
  SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_CONSTRUCTOR
#else
  BlockHeader_()
    : sync_1(0)
    , sync_2(0)
    , crc(0)
    , id(0)
    , revision(0)
    , length(0)
    , tow(0)
    , wnc(0)  {
    }
  BlockHeader_(const ContainerAllocator& _alloc)
    : sync_1(0)
    , sync_2(0)
    , crc(0)
    , id(0)
    , revision(0)
    , length(0)
    , tow(0)
    , wnc(0)  {
  (void)_alloc;
    }

#endif


   typedef uint8_t _sync_1_type;
  _sync_1_type sync_1;

   typedef uint8_t _sync_2_type;
  _sync_2_type sync_2;

   typedef uint16_t _crc_type;
  _crc_type crc;

   typedef uint16_t _id_type;
  _id_type id;

   typedef uint8_t _revision_type;
  _revision_type revision;

   typedef uint16_t _length_type;
  _length_type length;

   typedef uint32_t _tow_type;
  _tow_type tow;

   typedef uint16_t _wnc_type;
  _wnc_type wnc;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> const> ConstPtr;

#ifdef SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_CLASS_BODY
  SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_CLASS_BODY
#endif
}; // struct BlockHeader_

typedef ::septentrio_gnss_driver::BlockHeader_<std::allocator<void> > BlockHeader;

typedef boost::shared_ptr< ::septentrio_gnss_driver::BlockHeader > BlockHeaderPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::BlockHeader const> BlockHeaderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator2> & rhs)
{
  return lhs.sync_1 == rhs.sync_1 &&
    lhs.sync_2 == rhs.sync_2 &&
    lhs.crc == rhs.crc &&
    lhs.id == rhs.id &&
    lhs.revision == rhs.revision &&
    lhs.length == rhs.length &&
    lhs.tow == rhs.tow &&
    lhs.wnc == rhs.wnc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "518ce7a1f9cbde747cc0c5b017e06f70";
  }

  static const char* value(const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x518ce7a1f9cbde74ULL;
  static const uint64_t static_value2 = 0x7cc0c5b017e06f70ULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/BlockHeader";
  }

  static const char* value(const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Blockheader including time header for all ROS messages that publish SBF blocks\n"
"\n"
"uint8     sync_1\n"
"uint8     sync_2\n"
"uint16    crc\n"
"uint16    id\n"
"uint8     revision\n"
"uint16    length\n"
"\n"
"uint32    tow # ms since week start\n"
"uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     \n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

#ifdef SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_SERIALIZER
  SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_SERIALIZER
#else
  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sync_1);
      stream.next(m.sync_2);
      stream.next(m.crc);
      stream.next(m.id);
      stream.next(m.revision);
      stream.next(m.length);
      stream.next(m.tow);
      stream.next(m.wnc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BlockHeader_
#endif

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

#ifdef SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_PRINTER
  SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_PLUGIN_PRINTER
#else
template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>& v)
  {
    s << indent << "sync_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sync_1);
    s << indent << "sync_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sync_2);
    s << indent << "crc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.crc);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "revision: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.revision);
    s << indent << "length: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.length);
    s << indent << "tow: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tow);
    s << indent << "wnc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wnc);
  }
};
#endif

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_BLOCKHEADER_H
