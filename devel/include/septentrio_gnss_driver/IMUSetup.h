// Generated by gencpp from file septentrio_gnss_driver/IMUSetup.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_IMUSETUP_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_IMUSETUP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <septentrio_gnss_driver/BlockHeader.h>

namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct IMUSetup_
{
  typedef IMUSetup_<ContainerAllocator> Type;

  IMUSetup_()
    : header()
    , block_header()
    , serial_port(0)
    , ant_lever_arm_x(0.0)
    , ant_lever_arm_y(0.0)
    , ant_lever_arm_z(0.0)
    , theta_x(0.0)
    , theta_y(0.0)
    , theta_z(0.0)  {
    }
  IMUSetup_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , block_header(_alloc)
    , serial_port(0)
    , ant_lever_arm_x(0.0)
    , ant_lever_arm_y(0.0)
    , ant_lever_arm_z(0.0)
    , theta_x(0.0)
    , theta_y(0.0)
    , theta_z(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>  _block_header_type;
  _block_header_type block_header;

   typedef uint8_t _serial_port_type;
  _serial_port_type serial_port;

   typedef float _ant_lever_arm_x_type;
  _ant_lever_arm_x_type ant_lever_arm_x;

   typedef float _ant_lever_arm_y_type;
  _ant_lever_arm_y_type ant_lever_arm_y;

   typedef float _ant_lever_arm_z_type;
  _ant_lever_arm_z_type ant_lever_arm_z;

   typedef float _theta_x_type;
  _theta_x_type theta_x;

   typedef float _theta_y_type;
  _theta_y_type theta_y;

   typedef float _theta_z_type;
  _theta_z_type theta_z;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> const> ConstPtr;

}; // struct IMUSetup_

typedef ::septentrio_gnss_driver::IMUSetup_<std::allocator<void> > IMUSetup;

typedef boost::shared_ptr< ::septentrio_gnss_driver::IMUSetup > IMUSetupPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::IMUSetup const> IMUSetupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.block_header == rhs.block_header &&
    lhs.serial_port == rhs.serial_port &&
    lhs.ant_lever_arm_x == rhs.ant_lever_arm_x &&
    lhs.ant_lever_arm_y == rhs.ant_lever_arm_y &&
    lhs.ant_lever_arm_z == rhs.ant_lever_arm_z &&
    lhs.theta_x == rhs.theta_x &&
    lhs.theta_y == rhs.theta_y &&
    lhs.theta_z == rhs.theta_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da16656e2ba26ce4129ef1261f4a5033";
  }

  static const char* value(const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda16656e2ba26ce4ULL;
  static const uint64_t static_value2 = 0x129ef1261f4a5033ULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/IMUSetup";
  }

  static const char* value(const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# IMUSetup block\n"
"# Block_Number 4224\n"
"\n"
"std_msgs/Header header\n"
"\n"
"# SBF block header including time header\n"
"BlockHeader block_header \n"
"\n"
"uint8   serial_port\n"
"float32 ant_lever_arm_x # m\n"
"float32 ant_lever_arm_y # m\n"
"float32 ant_lever_arm_z # m\n"
"float32 theta_x # deg\n"
"float32 theta_y # deg\n"
"float32 theta_z # deg\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: septentrio_gnss_driver/BlockHeader\n"
"# Blockheader including time header for all ROS messages that publish SBF blocks\n"
"\n"
"uint8     sync_1\n"
"uint8     sync_2\n"
"uint16    crc\n"
"uint16    id\n"
"uint8     revision\n"
"uint16    length\n"
"\n"
"uint32    tow # ms since week start\n"
"uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     \n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.block_header);
      stream.next(m.serial_port);
      stream.next(m.ant_lever_arm_x);
      stream.next(m.ant_lever_arm_y);
      stream.next(m.ant_lever_arm_z);
      stream.next(m.theta_x);
      stream.next(m.theta_y);
      stream.next(m.theta_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMUSetup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::IMUSetup_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "block_header: ";
    s << std::endl;
    Printer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.block_header);
    s << indent << "serial_port: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.serial_port);
    s << indent << "ant_lever_arm_x: ";
    Printer<float>::stream(s, indent + "  ", v.ant_lever_arm_x);
    s << indent << "ant_lever_arm_y: ";
    Printer<float>::stream(s, indent + "  ", v.ant_lever_arm_y);
    s << indent << "ant_lever_arm_z: ";
    Printer<float>::stream(s, indent + "  ", v.ant_lever_arm_z);
    s << indent << "theta_x: ";
    Printer<float>::stream(s, indent + "  ", v.theta_x);
    s << indent << "theta_y: ";
    Printer<float>::stream(s, indent + "  ", v.theta_y);
    s << indent << "theta_z: ";
    Printer<float>::stream(s, indent + "  ", v.theta_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_IMUSETUP_H
