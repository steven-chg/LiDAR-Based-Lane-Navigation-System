// Generated by gencpp from file septentrio_gnss_driver/INSNavGeod.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_INSNAVGEOD_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_INSNAVGEOD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <septentrio_gnss_driver/BlockHeader.h>

namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct INSNavGeod_
{
  typedef INSNavGeod_<ContainerAllocator> Type;

  INSNavGeod_()
    : header()
    , block_header()
    , gnss_mode(0)
    , error(0)
    , info(0)
    , gnss_age(0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , accuracy(0)
    , latency(0)
    , datum(0)
    , sb_list(0)
    , latitude_std_dev(0.0)
    , longitude_std_dev(0.0)
    , height_std_dev(0.0)
    , latitude_longitude_cov(0.0)
    , latitude_height_cov(0.0)
    , longitude_height_cov(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)
    , roll_std_dev(0.0)
    , heading_pitch_cov(0.0)
    , heading_roll_cov(0.0)
    , pitch_roll_cov(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , ve_std_dev(0.0)
    , vn_std_dev(0.0)
    , vu_std_dev(0.0)
    , ve_vn_cov(0.0)
    , ve_vu_cov(0.0)
    , vn_vu_cov(0.0)  {
    }
  INSNavGeod_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , block_header(_alloc)
    , gnss_mode(0)
    , error(0)
    , info(0)
    , gnss_age(0)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , accuracy(0)
    , latency(0)
    , datum(0)
    , sb_list(0)
    , latitude_std_dev(0.0)
    , longitude_std_dev(0.0)
    , height_std_dev(0.0)
    , latitude_longitude_cov(0.0)
    , latitude_height_cov(0.0)
    , longitude_height_cov(0.0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , heading_std_dev(0.0)
    , pitch_std_dev(0.0)
    , roll_std_dev(0.0)
    , heading_pitch_cov(0.0)
    , heading_roll_cov(0.0)
    , pitch_roll_cov(0.0)
    , ve(0.0)
    , vn(0.0)
    , vu(0.0)
    , ve_std_dev(0.0)
    , vn_std_dev(0.0)
    , vu_std_dev(0.0)
    , ve_vn_cov(0.0)
    , ve_vu_cov(0.0)
    , vn_vu_cov(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>  _block_header_type;
  _block_header_type block_header;

   typedef uint8_t _gnss_mode_type;
  _gnss_mode_type gnss_mode;

   typedef uint8_t _error_type;
  _error_type error;

   typedef uint16_t _info_type;
  _info_type info;

   typedef uint16_t _gnss_age_type;
  _gnss_age_type gnss_age;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef float _undulation_type;
  _undulation_type undulation;

   typedef uint16_t _accuracy_type;
  _accuracy_type accuracy;

   typedef uint16_t _latency_type;
  _latency_type latency;

   typedef uint8_t _datum_type;
  _datum_type datum;

   typedef uint16_t _sb_list_type;
  _sb_list_type sb_list;

   typedef float _latitude_std_dev_type;
  _latitude_std_dev_type latitude_std_dev;

   typedef float _longitude_std_dev_type;
  _longitude_std_dev_type longitude_std_dev;

   typedef float _height_std_dev_type;
  _height_std_dev_type height_std_dev;

   typedef float _latitude_longitude_cov_type;
  _latitude_longitude_cov_type latitude_longitude_cov;

   typedef float _latitude_height_cov_type;
  _latitude_height_cov_type latitude_height_cov;

   typedef float _longitude_height_cov_type;
  _longitude_height_cov_type longitude_height_cov;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _heading_std_dev_type;
  _heading_std_dev_type heading_std_dev;

   typedef float _pitch_std_dev_type;
  _pitch_std_dev_type pitch_std_dev;

   typedef float _roll_std_dev_type;
  _roll_std_dev_type roll_std_dev;

   typedef float _heading_pitch_cov_type;
  _heading_pitch_cov_type heading_pitch_cov;

   typedef float _heading_roll_cov_type;
  _heading_roll_cov_type heading_roll_cov;

   typedef float _pitch_roll_cov_type;
  _pitch_roll_cov_type pitch_roll_cov;

   typedef float _ve_type;
  _ve_type ve;

   typedef float _vn_type;
  _vn_type vn;

   typedef float _vu_type;
  _vu_type vu;

   typedef float _ve_std_dev_type;
  _ve_std_dev_type ve_std_dev;

   typedef float _vn_std_dev_type;
  _vn_std_dev_type vn_std_dev;

   typedef float _vu_std_dev_type;
  _vu_std_dev_type vu_std_dev;

   typedef float _ve_vn_cov_type;
  _ve_vn_cov_type ve_vn_cov;

   typedef float _ve_vu_cov_type;
  _ve_vu_cov_type ve_vu_cov;

   typedef float _vn_vu_cov_type;
  _vn_vu_cov_type vn_vu_cov;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> const> ConstPtr;

}; // struct INSNavGeod_

typedef ::septentrio_gnss_driver::INSNavGeod_<std::allocator<void> > INSNavGeod;

typedef boost::shared_ptr< ::septentrio_gnss_driver::INSNavGeod > INSNavGeodPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::INSNavGeod const> INSNavGeodConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.block_header == rhs.block_header &&
    lhs.gnss_mode == rhs.gnss_mode &&
    lhs.error == rhs.error &&
    lhs.info == rhs.info &&
    lhs.gnss_age == rhs.gnss_age &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.height == rhs.height &&
    lhs.undulation == rhs.undulation &&
    lhs.accuracy == rhs.accuracy &&
    lhs.latency == rhs.latency &&
    lhs.datum == rhs.datum &&
    lhs.sb_list == rhs.sb_list &&
    lhs.latitude_std_dev == rhs.latitude_std_dev &&
    lhs.longitude_std_dev == rhs.longitude_std_dev &&
    lhs.height_std_dev == rhs.height_std_dev &&
    lhs.latitude_longitude_cov == rhs.latitude_longitude_cov &&
    lhs.latitude_height_cov == rhs.latitude_height_cov &&
    lhs.longitude_height_cov == rhs.longitude_height_cov &&
    lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.heading_std_dev == rhs.heading_std_dev &&
    lhs.pitch_std_dev == rhs.pitch_std_dev &&
    lhs.roll_std_dev == rhs.roll_std_dev &&
    lhs.heading_pitch_cov == rhs.heading_pitch_cov &&
    lhs.heading_roll_cov == rhs.heading_roll_cov &&
    lhs.pitch_roll_cov == rhs.pitch_roll_cov &&
    lhs.ve == rhs.ve &&
    lhs.vn == rhs.vn &&
    lhs.vu == rhs.vu &&
    lhs.ve_std_dev == rhs.ve_std_dev &&
    lhs.vn_std_dev == rhs.vn_std_dev &&
    lhs.vu_std_dev == rhs.vu_std_dev &&
    lhs.ve_vn_cov == rhs.ve_vn_cov &&
    lhs.ve_vu_cov == rhs.ve_vu_cov &&
    lhs.vn_vu_cov == rhs.vn_vu_cov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7e95cd9c24ef355a547323f4ca3d6e14";
  }

  static const char* value(const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7e95cd9c24ef355aULL;
  static const uint64_t static_value2 = 0x547323f4ca3d6e14ULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/INSNavGeod";
  }

  static const char* value(const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# INSNavGeod block \n"
"# Block_Number 4226\n"
"\n"
"std_msgs/Header header\n"
"\n"
"# SBF block header including time header\n"
"BlockHeader block_header\n"
"\n"
"uint8       gnss_mode\n"
"uint8       error\n"
"uint16      info\n"
"uint16      gnss_age   # 0.01 s\n"
"float64     latitude   # rad\n"
"float64     longitude  # rad\n"
"float64     height     # m (ellipsoidal)\n"
"float32     undulation # m\n"
"uint16      accuracy   # 0.01 m\n"
"uint16      latency    # 0.0001 s\n"
"uint8       datum\n"
"#uint8       reserved\n"
"uint16      sb_list\n"
"\n"
"# INSNavGeodPosStdDev sub-block definition:\n"
"# If the Position StdDev field is 1 then this sub block is available:\n"
"float32     latitude_std_dev  # m\n"
"float32     longitude_std_dev # m\n"
"float32     height_std_dev    # m\n"
"\n"
"# INSNavGeodPosCov sub-block definition:\n"
"# If the Position Cov field is 1 then this sub block is available:\n"
"float32     latitude_longitude_cov # m^2\n"
"float32     latitude_height_cov    # m^2\n"
"float32     longitude_height_cov   # m^2\n"
"\n"
"# INSNavGeodAtt sub-block definition:\n"
"# If the Attitude field is 1 then this sub block is available:\n"
"float32     heading # deg\n"
"float32     pitch   # deg\n"
"float32     roll    # deg\n"
"\n"
"# INSNavGeodAttStdDev sub-block definition:\n"
"# If the Attitude StdDev field is 1 then this sub block is available:\n"
"float32     heading_std_dev # deg\n"
"float32     pitch_std_dev   # deg\n"
"float32     roll_std_dev    # deg\n"
"\n"
"# INSNavGeodAttCov sub-block definition:\n"
"# If the Attitude Cov field is 1 then this sub block is available:\n"
"float32     heading_pitch_cov # deg^2\n"
"float32     heading_roll_cov  # deg^2\n"
"float32     pitch_roll_cov    # deg^2\n"
"\n"
"# INSNavGeodVel sub-block definition:\n"
"# If the Velocity field is 1 then this sub block is available:\n"
"float32     ve # m/s\n"
"float32     vn # m/s \n"
"float32     vu # m/s\n"
"\n"
"# INSNavGeodVelStdDev sub-block definition:\n"
"# If the Velocity StdDev field is 1 then this sub block is available:\n"
"float32     ve_std_dev # m/s\n"
"float32     vn_std_dev # m/s\n"
"float32     vu_std_dev # m/s\n"
"\n"
"# INSNavGeodVelCov sub-block definition:\n"
"# If the Velocity Cov field is 1 then this sub block is available:\n"
"float32     ve_vn_cov # m^2/s^2\n"
"float32     ve_vu_cov # m^2/s^2\n"
"float32     vn_vu_cov # m^2/s^2   \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: septentrio_gnss_driver/BlockHeader\n"
"# Blockheader including time header for all ROS messages that publish SBF blocks\n"
"\n"
"uint8     sync_1\n"
"uint8     sync_2\n"
"uint16    crc\n"
"uint16    id\n"
"uint8     revision\n"
"uint16    length\n"
"\n"
"uint32    tow # ms since week start\n"
"uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     \n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.block_header);
      stream.next(m.gnss_mode);
      stream.next(m.error);
      stream.next(m.info);
      stream.next(m.gnss_age);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.undulation);
      stream.next(m.accuracy);
      stream.next(m.latency);
      stream.next(m.datum);
      stream.next(m.sb_list);
      stream.next(m.latitude_std_dev);
      stream.next(m.longitude_std_dev);
      stream.next(m.height_std_dev);
      stream.next(m.latitude_longitude_cov);
      stream.next(m.latitude_height_cov);
      stream.next(m.longitude_height_cov);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.heading_std_dev);
      stream.next(m.pitch_std_dev);
      stream.next(m.roll_std_dev);
      stream.next(m.heading_pitch_cov);
      stream.next(m.heading_roll_cov);
      stream.next(m.pitch_roll_cov);
      stream.next(m.ve);
      stream.next(m.vn);
      stream.next(m.vu);
      stream.next(m.ve_std_dev);
      stream.next(m.vn_std_dev);
      stream.next(m.vu_std_dev);
      stream.next(m.ve_vn_cov);
      stream.next(m.ve_vu_cov);
      stream.next(m.vn_vu_cov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSNavGeod_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::INSNavGeod_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "block_header: ";
    s << std::endl;
    Printer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.block_header);
    s << indent << "gnss_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gnss_mode);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "info: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.info);
    s << indent << "gnss_age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gnss_age);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "undulation: ";
    Printer<float>::stream(s, indent + "  ", v.undulation);
    s << indent << "accuracy: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.accuracy);
    s << indent << "latency: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.latency);
    s << indent << "datum: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.datum);
    s << indent << "sb_list: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.sb_list);
    s << indent << "latitude_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_std_dev);
    s << indent << "longitude_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_std_dev);
    s << indent << "height_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.height_std_dev);
    s << indent << "latitude_longitude_cov: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_longitude_cov);
    s << indent << "latitude_height_cov: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_height_cov);
    s << indent << "longitude_height_cov: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_height_cov);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "heading_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.heading_std_dev);
    s << indent << "pitch_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_std_dev);
    s << indent << "roll_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.roll_std_dev);
    s << indent << "heading_pitch_cov: ";
    Printer<float>::stream(s, indent + "  ", v.heading_pitch_cov);
    s << indent << "heading_roll_cov: ";
    Printer<float>::stream(s, indent + "  ", v.heading_roll_cov);
    s << indent << "pitch_roll_cov: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_roll_cov);
    s << indent << "ve: ";
    Printer<float>::stream(s, indent + "  ", v.ve);
    s << indent << "vn: ";
    Printer<float>::stream(s, indent + "  ", v.vn);
    s << indent << "vu: ";
    Printer<float>::stream(s, indent + "  ", v.vu);
    s << indent << "ve_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.ve_std_dev);
    s << indent << "vn_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.vn_std_dev);
    s << indent << "vu_std_dev: ";
    Printer<float>::stream(s, indent + "  ", v.vu_std_dev);
    s << indent << "ve_vn_cov: ";
    Printer<float>::stream(s, indent + "  ", v.ve_vn_cov);
    s << indent << "ve_vu_cov: ";
    Printer<float>::stream(s, indent + "  ", v.ve_vu_cov);
    s << indent << "vn_vu_cov: ";
    Printer<float>::stream(s, indent + "  ", v.vn_vu_cov);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_INSNAVGEOD_H
