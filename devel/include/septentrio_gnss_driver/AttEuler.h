// Generated by gencpp from file septentrio_gnss_driver/AttEuler.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_ATTEULER_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_ATTEULER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <septentrio_gnss_driver/BlockHeader.h>

namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct AttEuler_
{
  typedef AttEuler_<ContainerAllocator> Type;

  AttEuler_()
    : header()
    , block_header()
    , nr_sv(0)
    , error(0)
    , mode(0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , pitch_dot(0.0)
    , roll_dot(0.0)
    , heading_dot(0.0)  {
    }
  AttEuler_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , block_header(_alloc)
    , nr_sv(0)
    , error(0)
    , mode(0)
    , heading(0.0)
    , pitch(0.0)
    , roll(0.0)
    , pitch_dot(0.0)
    , roll_dot(0.0)
    , heading_dot(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator>  _block_header_type;
  _block_header_type block_header;

   typedef uint8_t _nr_sv_type;
  _nr_sv_type nr_sv;

   typedef uint8_t _error_type;
  _error_type error;

   typedef uint16_t _mode_type;
  _mode_type mode;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_dot_type;
  _pitch_dot_type pitch_dot;

   typedef float _roll_dot_type;
  _roll_dot_type roll_dot;

   typedef float _heading_dot_type;
  _heading_dot_type heading_dot;





  typedef boost::shared_ptr< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> const> ConstPtr;

}; // struct AttEuler_

typedef ::septentrio_gnss_driver::AttEuler_<std::allocator<void> > AttEuler;

typedef boost::shared_ptr< ::septentrio_gnss_driver::AttEuler > AttEulerPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::AttEuler const> AttEulerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.block_header == rhs.block_header &&
    lhs.nr_sv == rhs.nr_sv &&
    lhs.error == rhs.error &&
    lhs.mode == rhs.mode &&
    lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.pitch_dot == rhs.pitch_dot &&
    lhs.roll_dot == rhs.roll_dot &&
    lhs.heading_dot == rhs.heading_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99d953843f049fd84269fcb833dbdaa6";
  }

  static const char* value(const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99d953843f049fd8ULL;
  static const uint64_t static_value2 = 0x4269fcb833dbdaa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/AttEuler";
  }

  static const char* value(const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# AttEuler block\n"
"# ROS message header\n"
"std_msgs/Header header\n"
"\n"
"# SBF block header including time header\n"
"BlockHeader  block_header   \n"
"\n"
"uint8        nr_sv\n"
"uint8        error        \n"
"uint16       mode\n"
"float32      heading     # deg\n"
"float32      pitch       # deg\n"
"float32      roll        # deg\n"
"float32      pitch_dot   # deg/s\n"
"float32      roll_dot    # deg/s\n"
"float32      heading_dot # deg/s\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: septentrio_gnss_driver/BlockHeader\n"
"# Blockheader including time header for all ROS messages that publish SBF blocks\n"
"\n"
"uint8     sync_1\n"
"uint8     sync_2\n"
"uint16    crc\n"
"uint16    id\n"
"uint8     revision\n"
"uint16    length\n"
"\n"
"uint32    tow # ms since week start\n"
"uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     \n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.block_header);
      stream.next(m.nr_sv);
      stream.next(m.error);
      stream.next(m.mode);
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.pitch_dot);
      stream.next(m.roll_dot);
      stream.next(m.heading_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AttEuler_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::AttEuler_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::AttEuler_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "block_header: ";
    s << std::endl;
    Printer< ::septentrio_gnss_driver::BlockHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.block_header);
    s << indent << "nr_sv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nr_sv);
    s << indent << "error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error);
    s << indent << "mode: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.mode);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch_dot: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_dot);
    s << indent << "roll_dot: ";
    Printer<float>::stream(s, indent + "  ", v.roll_dot);
    s << indent << "heading_dot: ";
    Printer<float>::stream(s, indent + "  ", v.heading_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_ATTEULER_H
