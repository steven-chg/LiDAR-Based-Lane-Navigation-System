// Generated by gencpp from file septentrio_gnss_driver/AIMPlusStatus.msg
// DO NOT EDIT!


#ifndef SEPTENTRIO_GNSS_DRIVER_MESSAGE_AIMPLUSSTATUS_H
#define SEPTENTRIO_GNSS_DRIVER_MESSAGE_AIMPLUSSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace septentrio_gnss_driver
{
template <class ContainerAllocator>
struct AIMPlusStatus_
{
  typedef AIMPlusStatus_<ContainerAllocator> Type;

  AIMPlusStatus_()
    : header()
    , tow(0)
    , wnc(0)
    , interference(0)
    , spoofing(0)
    , osnma_authenticating(false)
    , galileo_authentic(0)
    , galileo_spoofed(0)
    , gps_authentic(0)
    , gps_spoofed(0)  {
    }
  AIMPlusStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tow(0)
    , wnc(0)
    , interference(0)
    , spoofing(0)
    , osnma_authenticating(false)
    , galileo_authentic(0)
    , galileo_spoofed(0)
    , gps_authentic(0)
    , gps_spoofed(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _tow_type;
  _tow_type tow;

   typedef uint16_t _wnc_type;
  _wnc_type wnc;

   typedef uint8_t _interference_type;
  _interference_type interference;

   typedef uint8_t _spoofing_type;
  _spoofing_type spoofing;

   typedef uint8_t _osnma_authenticating_type;
  _osnma_authenticating_type osnma_authenticating;

   typedef uint8_t _galileo_authentic_type;
  _galileo_authentic_type galileo_authentic;

   typedef uint8_t _galileo_spoofed_type;
  _galileo_spoofed_type galileo_spoofed;

   typedef uint8_t _gps_authentic_type;
  _gps_authentic_type gps_authentic;

   typedef uint8_t _gps_spoofed_type;
  _gps_spoofed_type gps_spoofed;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SPECTRUM_CLEAN)
  #undef SPECTRUM_CLEAN
#endif
#if defined(_WIN32) && defined(INTERFERENCE_MITIGATED)
  #undef INTERFERENCE_MITIGATED
#endif
#if defined(_WIN32) && defined(INTERFERENCE_PRESENT)
  #undef INTERFERENCE_PRESENT
#endif
#if defined(_WIN32) && defined(NONE_DETECTED)
  #undef NONE_DETECTED
#endif
#if defined(_WIN32) && defined(SPOOFING_DETECTED_BY_OSNMA)
  #undef SPOOFING_DETECTED_BY_OSNMA
#endif
#if defined(_WIN32) && defined(SPOOFING_DETECTED_BY_AUTHENTCITY_TEST)
  #undef SPOOFING_DETECTED_BY_AUTHENTCITY_TEST
#endif
#if defined(_WIN32) && defined(SPOOFING_DETECTED_BY_OSNMA_AND_AUTHENTCITY_TEST)
  #undef SPOOFING_DETECTED_BY_OSNMA_AND_AUTHENTCITY_TEST
#endif

  enum {
    SPECTRUM_CLEAN = 0u,
    INTERFERENCE_MITIGATED = 1u,
    INTERFERENCE_PRESENT = 2u,
    NONE_DETECTED = 0u,
    SPOOFING_DETECTED_BY_OSNMA = 1u,
    SPOOFING_DETECTED_BY_AUTHENTCITY_TEST = 2u,
    SPOOFING_DETECTED_BY_OSNMA_AND_AUTHENTCITY_TEST = 3u,
  };


  typedef boost::shared_ptr< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> const> ConstPtr;

}; // struct AIMPlusStatus_

typedef ::septentrio_gnss_driver::AIMPlusStatus_<std::allocator<void> > AIMPlusStatus;

typedef boost::shared_ptr< ::septentrio_gnss_driver::AIMPlusStatus > AIMPlusStatusPtr;
typedef boost::shared_ptr< ::septentrio_gnss_driver::AIMPlusStatus const> AIMPlusStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tow == rhs.tow &&
    lhs.wnc == rhs.wnc &&
    lhs.interference == rhs.interference &&
    lhs.spoofing == rhs.spoofing &&
    lhs.osnma_authenticating == rhs.osnma_authenticating &&
    lhs.galileo_authentic == rhs.galileo_authentic &&
    lhs.galileo_spoofed == rhs.galileo_spoofed &&
    lhs.gps_authentic == rhs.gps_authentic &&
    lhs.gps_spoofed == rhs.gps_spoofed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator1> & lhs, const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace septentrio_gnss_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85cf4fc2fc2598dca0b9bb856cb2dcdd";
  }

  static const char* value(const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85cf4fc2fc2598dcULL;
  static const uint64_t static_value2 = 0xa0b9bb856cb2dcddULL;
};

template<class ContainerAllocator>
struct DataType< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "septentrio_gnss_driver/AIMPlusStatus";
  }

  static const char* value(const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# AIMPlusStatus message\n"
"# ROS message header\n"
"std_msgs/Header header\n"
"\n"
"uint32 tow # ms since week start\n"
"uint16 wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     \n"
"\n"
"uint8 interference\n"
"#-------------------------------\n"
"uint8 SPECTRUM_CLEAN         = 0\n"
"uint8 INTERFERENCE_MITIGATED = 1\n"
"uint8 INTERFERENCE_PRESENT   = 2\n"
"#-------------------------------\n"
"\n"
"uint8 spoofing\n"
"#--------------------------------------------------------\n"
"uint8 NONE_DETECTED                                   = 0\n"
"uint8 SPOOFING_DETECTED_BY_OSNMA                      = 1\n"
"uint8 SPOOFING_DETECTED_BY_AUTHENTCITY_TEST           = 2\n"
"uint8 SPOOFING_DETECTED_BY_OSNMA_AND_AUTHENTCITY_TEST = 3\n"
"#--------------------------------------------------------\n"
"\n"
"bool  osnma_authenticating\n"
"uint8 galileo_authentic\n"
"uint8 galileo_spoofed\n"
"uint8 gps_authentic\n"
"uint8 gps_spoofed\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tow);
      stream.next(m.wnc);
      stream.next(m.interference);
      stream.next(m.spoofing);
      stream.next(m.osnma_authenticating);
      stream.next(m.galileo_authentic);
      stream.next(m.galileo_spoofed);
      stream.next(m.gps_authentic);
      stream.next(m.gps_spoofed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AIMPlusStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::septentrio_gnss_driver::AIMPlusStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tow: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tow);
    s << indent << "wnc: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wnc);
    s << indent << "interference: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interference);
    s << indent << "spoofing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.spoofing);
    s << indent << "osnma_authenticating: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.osnma_authenticating);
    s << indent << "galileo_authentic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_authentic);
    s << indent << "galileo_spoofed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.galileo_spoofed);
    s << indent << "gps_authentic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_authentic);
    s << indent << "gps_spoofed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_spoofed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEPTENTRIO_GNSS_DRIVER_MESSAGE_AIMPLUSSTATUS_H
