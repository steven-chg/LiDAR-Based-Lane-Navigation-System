# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from septentrio_gnss_driver/INSNavGeod.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import septentrio_gnss_driver.msg
import std_msgs.msg

class INSNavGeod(genpy.Message):
  _md5sum = "7e95cd9c24ef355a547323f4ca3d6e14"
  _type = "septentrio_gnss_driver/INSNavGeod"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# INSNavGeod block 
# Block_Number 4226

std_msgs/Header header

# SBF block header including time header
BlockHeader block_header

uint8       gnss_mode
uint8       error
uint16      info
uint16      gnss_age   # 0.01 s
float64     latitude   # rad
float64     longitude  # rad
float64     height     # m (ellipsoidal)
float32     undulation # m
uint16      accuracy   # 0.01 m
uint16      latency    # 0.0001 s
uint8       datum
#uint8       reserved
uint16      sb_list

# INSNavGeodPosStdDev sub-block definition:
# If the Position StdDev field is 1 then this sub block is available:
float32     latitude_std_dev  # m
float32     longitude_std_dev # m
float32     height_std_dev    # m

# INSNavGeodPosCov sub-block definition:
# If the Position Cov field is 1 then this sub block is available:
float32     latitude_longitude_cov # m^2
float32     latitude_height_cov    # m^2
float32     longitude_height_cov   # m^2

# INSNavGeodAtt sub-block definition:
# If the Attitude field is 1 then this sub block is available:
float32     heading # deg
float32     pitch   # deg
float32     roll    # deg

# INSNavGeodAttStdDev sub-block definition:
# If the Attitude StdDev field is 1 then this sub block is available:
float32     heading_std_dev # deg
float32     pitch_std_dev   # deg
float32     roll_std_dev    # deg

# INSNavGeodAttCov sub-block definition:
# If the Attitude Cov field is 1 then this sub block is available:
float32     heading_pitch_cov # deg^2
float32     heading_roll_cov  # deg^2
float32     pitch_roll_cov    # deg^2

# INSNavGeodVel sub-block definition:
# If the Velocity field is 1 then this sub block is available:
float32     ve # m/s
float32     vn # m/s 
float32     vu # m/s

# INSNavGeodVelStdDev sub-block definition:
# If the Velocity StdDev field is 1 then this sub block is available:
float32     ve_std_dev # m/s
float32     vn_std_dev # m/s
float32     vu_std_dev # m/s

# INSNavGeodVelCov sub-block definition:
# If the Velocity Cov field is 1 then this sub block is available:
float32     ve_vn_cov # m^2/s^2
float32     ve_vu_cov # m^2/s^2
float32     vn_vu_cov # m^2/s^2   

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: septentrio_gnss_driver/BlockHeader
# Blockheader including time header for all ROS messages that publish SBF blocks

uint8     sync_1
uint8     sync_2
uint16    crc
uint16    id
uint8     revision
uint16    length

uint32    tow # ms since week start
uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     """
  __slots__ = ['header','block_header','gnss_mode','error','info','gnss_age','latitude','longitude','height','undulation','accuracy','latency','datum','sb_list','latitude_std_dev','longitude_std_dev','height_std_dev','latitude_longitude_cov','latitude_height_cov','longitude_height_cov','heading','pitch','roll','heading_std_dev','pitch_std_dev','roll_std_dev','heading_pitch_cov','heading_roll_cov','pitch_roll_cov','ve','vn','vu','ve_std_dev','vn_std_dev','vu_std_dev','ve_vn_cov','ve_vu_cov','vn_vu_cov']
  _slot_types = ['std_msgs/Header','septentrio_gnss_driver/BlockHeader','uint8','uint8','uint16','uint16','float64','float64','float64','float32','uint16','uint16','uint8','uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,block_header,gnss_mode,error,info,gnss_age,latitude,longitude,height,undulation,accuracy,latency,datum,sb_list,latitude_std_dev,longitude_std_dev,height_std_dev,latitude_longitude_cov,latitude_height_cov,longitude_height_cov,heading,pitch,roll,heading_std_dev,pitch_std_dev,roll_std_dev,heading_pitch_cov,heading_roll_cov,pitch_roll_cov,ve,vn,vu,ve_std_dev,vn_std_dev,vu_std_dev,ve_vn_cov,ve_vu_cov,vn_vu_cov

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSNavGeod, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      if self.gnss_mode is None:
        self.gnss_mode = 0
      if self.error is None:
        self.error = 0
      if self.info is None:
        self.info = 0
      if self.gnss_age is None:
        self.gnss_age = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.height is None:
        self.height = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.accuracy is None:
        self.accuracy = 0
      if self.latency is None:
        self.latency = 0
      if self.datum is None:
        self.datum = 0
      if self.sb_list is None:
        self.sb_list = 0
      if self.latitude_std_dev is None:
        self.latitude_std_dev = 0.
      if self.longitude_std_dev is None:
        self.longitude_std_dev = 0.
      if self.height_std_dev is None:
        self.height_std_dev = 0.
      if self.latitude_longitude_cov is None:
        self.latitude_longitude_cov = 0.
      if self.latitude_height_cov is None:
        self.latitude_height_cov = 0.
      if self.longitude_height_cov is None:
        self.longitude_height_cov = 0.
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.heading_std_dev is None:
        self.heading_std_dev = 0.
      if self.pitch_std_dev is None:
        self.pitch_std_dev = 0.
      if self.roll_std_dev is None:
        self.roll_std_dev = 0.
      if self.heading_pitch_cov is None:
        self.heading_pitch_cov = 0.
      if self.heading_roll_cov is None:
        self.heading_roll_cov = 0.
      if self.pitch_roll_cov is None:
        self.pitch_roll_cov = 0.
      if self.ve is None:
        self.ve = 0.
      if self.vn is None:
        self.vn = 0.
      if self.vu is None:
        self.vu = 0.
      if self.ve_std_dev is None:
        self.ve_std_dev = 0.
      if self.vn_std_dev is None:
        self.vn_std_dev = 0.
      if self.vu_std_dev is None:
        self.vu_std_dev = 0.
      if self.ve_vn_cov is None:
        self.ve_vn_cov = 0.
      if self.ve_vu_cov is None:
        self.ve_vu_cov = 0.
      if self.vn_vu_cov is None:
        self.vn_vu_cov = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      self.gnss_mode = 0
      self.error = 0
      self.info = 0
      self.gnss_age = 0
      self.latitude = 0.
      self.longitude = 0.
      self.height = 0.
      self.undulation = 0.
      self.accuracy = 0
      self.latency = 0
      self.datum = 0
      self.sb_list = 0
      self.latitude_std_dev = 0.
      self.longitude_std_dev = 0.
      self.height_std_dev = 0.
      self.latitude_longitude_cov = 0.
      self.latitude_height_cov = 0.
      self.longitude_height_cov = 0.
      self.heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.heading_std_dev = 0.
      self.pitch_std_dev = 0.
      self.roll_std_dev = 0.
      self.heading_pitch_cov = 0.
      self.heading_roll_cov = 0.
      self.pitch_roll_cov = 0.
      self.ve = 0.
      self.vn = 0.
      self.vu = 0.
      self.ve_std_dev = 0.
      self.vn_std_dev = 0.
      self.vu_std_dev = 0.
      self.ve_vn_cov = 0.
      self.ve_vu_cov = 0.
      self.vn_vu_cov = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH2B2H3df2HBH24f().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev, _x.latitude_longitude_cov, _x.latitude_height_cov, _x.longitude_height_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.ve, _x.vn, _x.vu, _x.ve_std_dev, _x.vn_std_dev, _x.vu_std_dev, _x.ve_vn_cov, _x.ve_vu_cov, _x.vn_vu_cov))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev, _x.latitude_longitude_cov, _x.latitude_height_cov, _x.longitude_height_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.ve, _x.vn, _x.vu, _x.ve_std_dev, _x.vn_std_dev, _x.vu_std_dev, _x.ve_vn_cov, _x.ve_vu_cov, _x.vn_vu_cov,) = _get_struct_2B2HBHIH2B2H3df2HBH24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH2B2H3df2HBH24f().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev, _x.latitude_longitude_cov, _x.latitude_height_cov, _x.longitude_height_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.ve, _x.vn, _x.vu, _x.ve_std_dev, _x.vn_std_dev, _x.vu_std_dev, _x.ve_vn_cov, _x.ve_vu_cov, _x.vn_vu_cov))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.latitude, _x.longitude, _x.height, _x.undulation, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.latitude_std_dev, _x.longitude_std_dev, _x.height_std_dev, _x.latitude_longitude_cov, _x.latitude_height_cov, _x.longitude_height_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.ve, _x.vn, _x.vu, _x.ve_std_dev, _x.vn_std_dev, _x.vu_std_dev, _x.ve_vn_cov, _x.ve_vu_cov, _x.vn_vu_cov,) = _get_struct_2B2HBHIH2B2H3df2HBH24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2HBHIH2B2H3df2HBH24f = None
def _get_struct_2B2HBHIH2B2H3df2HBH24f():
    global _struct_2B2HBHIH2B2H3df2HBH24f
    if _struct_2B2HBHIH2B2H3df2HBH24f is None:
        _struct_2B2HBHIH2B2H3df2HBH24f = struct.Struct("<2B2HBHIH2B2H3df2HBH24f")
    return _struct_2B2HBHIH2B2H3df2HBH24f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
