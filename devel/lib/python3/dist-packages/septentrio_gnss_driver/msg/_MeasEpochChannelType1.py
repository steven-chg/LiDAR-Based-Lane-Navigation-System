# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from septentrio_gnss_driver/MeasEpochChannelType1.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import septentrio_gnss_driver.msg

class MeasEpochChannelType1(genpy.Message):
  _md5sum = "6ec5531728aded72fdbf7e7550cabd87"
  _type = "septentrio_gnss_driver/MeasEpochChannelType1"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# MeasEpochChannelType1 block
   
uint8  rx_channel
uint8  type
uint8  sv_id
uint8  misc        # 4294967.296 m
uint32 code_lsb    # 0.001 m
int32  doppler     # 0.0001 Hz
uint16 carrier_lsb # 0.001 cycles
int8   carrier_msb # 65.536 cycles
uint8  cn0         # 0.25 dB-Hz
uint16 lock_time
uint8  obs_info
uint8  n2

MeasEpochChannelType2[] type2
================================================================================
MSG: septentrio_gnss_driver/MeasEpochChannelType2
# MeasEpochChannelType2 block
   
uint8  type
uint8  lock_time          # s
uint8  cn0                # 0.25 dB-Hz
uint8  offsets_msb        # 65.536 m or 65.536 Hz
int8   carrier_msb        # 65.536 cycles
uint8  obs_info
uint16 code_offset_lsb    # 0.001 m
uint16 carrier_lsb        # 0.001 cycles
uint16 doppler_offset_lsb # 0.0001 Hz"""
  __slots__ = ['rx_channel','type','sv_id','misc','code_lsb','doppler','carrier_lsb','carrier_msb','cn0','lock_time','obs_info','n2','type2']
  _slot_types = ['uint8','uint8','uint8','uint8','uint32','int32','uint16','int8','uint8','uint16','uint8','uint8','septentrio_gnss_driver/MeasEpochChannelType2[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rx_channel,type,sv_id,misc,code_lsb,doppler,carrier_lsb,carrier_msb,cn0,lock_time,obs_info,n2,type2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MeasEpochChannelType1, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rx_channel is None:
        self.rx_channel = 0
      if self.type is None:
        self.type = 0
      if self.sv_id is None:
        self.sv_id = 0
      if self.misc is None:
        self.misc = 0
      if self.code_lsb is None:
        self.code_lsb = 0
      if self.doppler is None:
        self.doppler = 0
      if self.carrier_lsb is None:
        self.carrier_lsb = 0
      if self.carrier_msb is None:
        self.carrier_msb = 0
      if self.cn0 is None:
        self.cn0 = 0
      if self.lock_time is None:
        self.lock_time = 0
      if self.obs_info is None:
        self.obs_info = 0
      if self.n2 is None:
        self.n2 = 0
      if self.type2 is None:
        self.type2 = []
    else:
      self.rx_channel = 0
      self.type = 0
      self.sv_id = 0
      self.misc = 0
      self.code_lsb = 0
      self.doppler = 0
      self.carrier_lsb = 0
      self.carrier_msb = 0
      self.cn0 = 0
      self.lock_time = 0
      self.obs_info = 0
      self.n2 = 0
      self.type2 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4BIiHbBH2B().pack(_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2))
      length = len(self.type2)
      buff.write(_struct_I.pack(length))
      for val1 in self.type2:
        _x = val1
        buff.write(_get_struct_4BbB3H().pack(_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.type2 is None:
        self.type2 = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2,) = _get_struct_4BIiHbBH2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.type2 = []
      for i in range(0, length):
        val1 = septentrio_gnss_driver.msg.MeasEpochChannelType2()
        _x = val1
        start = end
        end += 12
        (_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb,) = _get_struct_4BbB3H().unpack(str[start:end])
        self.type2.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4BIiHbBH2B().pack(_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2))
      length = len(self.type2)
      buff.write(_struct_I.pack(length))
      for val1 in self.type2:
        _x = val1
        buff.write(_get_struct_4BbB3H().pack(_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.type2 is None:
        self.type2 = None
      end = 0
      _x = self
      start = end
      end += 20
      (_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2,) = _get_struct_4BIiHbBH2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.type2 = []
      for i in range(0, length):
        val1 = septentrio_gnss_driver.msg.MeasEpochChannelType2()
        _x = val1
        start = end
        end += 12
        (_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb,) = _get_struct_4BbB3H().unpack(str[start:end])
        self.type2.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4BIiHbBH2B = None
def _get_struct_4BIiHbBH2B():
    global _struct_4BIiHbBH2B
    if _struct_4BIiHbBH2B is None:
        _struct_4BIiHbBH2B = struct.Struct("<4BIiHbBH2B")
    return _struct_4BIiHbBH2B
_struct_4BbB3H = None
def _get_struct_4BbB3H():
    global _struct_4BbB3H
    if _struct_4BbB3H is None:
        _struct_4BbB3H = struct.Struct("<4BbB3H")
    return _struct_4BbB3H
