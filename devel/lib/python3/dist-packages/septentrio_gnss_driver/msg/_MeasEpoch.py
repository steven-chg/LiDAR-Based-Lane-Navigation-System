# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from septentrio_gnss_driver/MeasEpoch.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import septentrio_gnss_driver.msg
import std_msgs.msg

class MeasEpoch(genpy.Message):
  _md5sum = "4cf9a1d78edfe10d2a772f4a50dd0645"
  _type = "septentrio_gnss_driver/MeasEpoch"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# MeasEpoch block
# ROS message header
std_msgs/Header header

# SBF block header including time header
BlockHeader  block_header   

uint8 n
uint8 sb1_length
uint8 sb2_length      
uint8 common_flags
uint8 cum_clk_jumps # 0.001 s

MeasEpochChannelType1[] type1
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: septentrio_gnss_driver/BlockHeader
# Blockheader including time header for all ROS messages that publish SBF blocks

uint8     sync_1
uint8     sync_2
uint16    crc
uint16    id
uint8     revision
uint16    length

uint32    tow # ms since week start
uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     
================================================================================
MSG: septentrio_gnss_driver/MeasEpochChannelType1
# MeasEpochChannelType1 block
   
uint8  rx_channel
uint8  type
uint8  sv_id
uint8  misc        # 4294967.296 m
uint32 code_lsb    # 0.001 m
int32  doppler     # 0.0001 Hz
uint16 carrier_lsb # 0.001 cycles
int8   carrier_msb # 65.536 cycles
uint8  cn0         # 0.25 dB-Hz
uint16 lock_time
uint8  obs_info
uint8  n2

MeasEpochChannelType2[] type2
================================================================================
MSG: septentrio_gnss_driver/MeasEpochChannelType2
# MeasEpochChannelType2 block
   
uint8  type
uint8  lock_time          # s
uint8  cn0                # 0.25 dB-Hz
uint8  offsets_msb        # 65.536 m or 65.536 Hz
int8   carrier_msb        # 65.536 cycles
uint8  obs_info
uint16 code_offset_lsb    # 0.001 m
uint16 carrier_lsb        # 0.001 cycles
uint16 doppler_offset_lsb # 0.0001 Hz"""
  __slots__ = ['header','block_header','n','sb1_length','sb2_length','common_flags','cum_clk_jumps','type1']
  _slot_types = ['std_msgs/Header','septentrio_gnss_driver/BlockHeader','uint8','uint8','uint8','uint8','uint8','septentrio_gnss_driver/MeasEpochChannelType1[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,block_header,n,sb1_length,sb2_length,common_flags,cum_clk_jumps,type1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MeasEpoch, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      if self.n is None:
        self.n = 0
      if self.sb1_length is None:
        self.sb1_length = 0
      if self.sb2_length is None:
        self.sb2_length = 0
      if self.common_flags is None:
        self.common_flags = 0
      if self.cum_clk_jumps is None:
        self.cum_clk_jumps = 0
      if self.type1 is None:
        self.type1 = []
    else:
      self.header = std_msgs.msg.Header()
      self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      self.n = 0
      self.sb1_length = 0
      self.sb2_length = 0
      self.common_flags = 0
      self.cum_clk_jumps = 0
      self.type1 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH5B().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb1_length, _x.sb2_length, _x.common_flags, _x.cum_clk_jumps))
      length = len(self.type1)
      buff.write(_struct_I.pack(length))
      for val1 in self.type1:
        _x = val1
        buff.write(_get_struct_4BIiHbBH2B().pack(_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2))
        length = len(val1.type2)
        buff.write(_struct_I.pack(length))
        for val2 in val1.type2:
          _x = val2
          buff.write(_get_struct_4BbB3H().pack(_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      if self.type1 is None:
        self.type1 = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb1_length, _x.sb2_length, _x.common_flags, _x.cum_clk_jumps,) = _get_struct_2B2HBHIH5B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.type1 = []
      for i in range(0, length):
        val1 = septentrio_gnss_driver.msg.MeasEpochChannelType1()
        _x = val1
        start = end
        end += 20
        (_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2,) = _get_struct_4BIiHbBH2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.type2 = []
        for i in range(0, length):
          val2 = septentrio_gnss_driver.msg.MeasEpochChannelType2()
          _x = val2
          start = end
          end += 12
          (_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb,) = _get_struct_4BbB3H().unpack(str[start:end])
          val1.type2.append(val2)
        self.type1.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH5B().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb1_length, _x.sb2_length, _x.common_flags, _x.cum_clk_jumps))
      length = len(self.type1)
      buff.write(_struct_I.pack(length))
      for val1 in self.type1:
        _x = val1
        buff.write(_get_struct_4BIiHbBH2B().pack(_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2))
        length = len(val1.type2)
        buff.write(_struct_I.pack(length))
        for val2 in val1.type2:
          _x = val2
          buff.write(_get_struct_4BbB3H().pack(_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      if self.type1 is None:
        self.type1 = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb1_length, _x.sb2_length, _x.common_flags, _x.cum_clk_jumps,) = _get_struct_2B2HBHIH5B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.type1 = []
      for i in range(0, length):
        val1 = septentrio_gnss_driver.msg.MeasEpochChannelType1()
        _x = val1
        start = end
        end += 20
        (_x.rx_channel, _x.type, _x.sv_id, _x.misc, _x.code_lsb, _x.doppler, _x.carrier_lsb, _x.carrier_msb, _x.cn0, _x.lock_time, _x.obs_info, _x.n2,) = _get_struct_4BIiHbBH2B().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.type2 = []
        for i in range(0, length):
          val2 = septentrio_gnss_driver.msg.MeasEpochChannelType2()
          _x = val2
          start = end
          end += 12
          (_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb,) = _get_struct_4BbB3H().unpack(str[start:end])
          val1.type2.append(val2)
        self.type1.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2HBHIH5B = None
def _get_struct_2B2HBHIH5B():
    global _struct_2B2HBHIH5B
    if _struct_2B2HBHIH5B is None:
        _struct_2B2HBHIH5B = struct.Struct("<2B2HBHIH5B")
    return _struct_2B2HBHIH5B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4BIiHbBH2B = None
def _get_struct_4BIiHbBH2B():
    global _struct_4BIiHbBH2B
    if _struct_4BIiHbBH2B is None:
        _struct_4BIiHbBH2B = struct.Struct("<4BIiHbBH2B")
    return _struct_4BIiHbBH2B
_struct_4BbB3H = None
def _get_struct_4BbB3H():
    global _struct_4BbB3H
    if _struct_4BbB3H is None:
        _struct_4BbB3H = struct.Struct("<4BbB3H")
    return _struct_4BbB3H
