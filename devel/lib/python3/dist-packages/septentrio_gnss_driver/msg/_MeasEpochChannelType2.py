# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from septentrio_gnss_driver/MeasEpochChannelType2.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MeasEpochChannelType2(genpy.Message):
  _md5sum = "204efbe40d2e56cd210b50c219f3a400"
  _type = "septentrio_gnss_driver/MeasEpochChannelType2"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# MeasEpochChannelType2 block
   
uint8  type
uint8  lock_time          # s
uint8  cn0                # 0.25 dB-Hz
uint8  offsets_msb        # 65.536 m or 65.536 Hz
int8   carrier_msb        # 65.536 cycles
uint8  obs_info
uint16 code_offset_lsb    # 0.001 m
uint16 carrier_lsb        # 0.001 cycles
uint16 doppler_offset_lsb # 0.0001 Hz"""
  __slots__ = ['type','lock_time','cn0','offsets_msb','carrier_msb','obs_info','code_offset_lsb','carrier_lsb','doppler_offset_lsb']
  _slot_types = ['uint8','uint8','uint8','uint8','int8','uint8','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,lock_time,cn0,offsets_msb,carrier_msb,obs_info,code_offset_lsb,carrier_lsb,doppler_offset_lsb

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MeasEpochChannelType2, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.lock_time is None:
        self.lock_time = 0
      if self.cn0 is None:
        self.cn0 = 0
      if self.offsets_msb is None:
        self.offsets_msb = 0
      if self.carrier_msb is None:
        self.carrier_msb = 0
      if self.obs_info is None:
        self.obs_info = 0
      if self.code_offset_lsb is None:
        self.code_offset_lsb = 0
      if self.carrier_lsb is None:
        self.carrier_lsb = 0
      if self.doppler_offset_lsb is None:
        self.doppler_offset_lsb = 0
    else:
      self.type = 0
      self.lock_time = 0
      self.cn0 = 0
      self.offsets_msb = 0
      self.carrier_msb = 0
      self.obs_info = 0
      self.code_offset_lsb = 0
      self.carrier_lsb = 0
      self.doppler_offset_lsb = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4BbB3H().pack(_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb,) = _get_struct_4BbB3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4BbB3H().pack(_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.type, _x.lock_time, _x.cn0, _x.offsets_msb, _x.carrier_msb, _x.obs_info, _x.code_offset_lsb, _x.carrier_lsb, _x.doppler_offset_lsb,) = _get_struct_4BbB3H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4BbB3H = None
def _get_struct_4BbB3H():
    global _struct_4BbB3H
    if _struct_4BbB3H is None:
        _struct_4BbB3H = struct.Struct("<4BbB3H")
    return _struct_4BbB3H
