# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from septentrio_gnss_driver/INSNavCart.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import septentrio_gnss_driver.msg
import std_msgs.msg

class INSNavCart(genpy.Message):
  _md5sum = "ebb1a1e03ea3fac47ad5f19264160123"
  _type = "septentrio_gnss_driver/INSNavCart"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# INSNavCart block 
# Block_Number 4225

std_msgs/Header header

# SBF block header including time header
BlockHeader block_header

uint8       gnss_mode
uint8       error
uint16      info
uint16      gnss_age # 0.01 s
float64     x        # m
float64     y        # m
float64     z        # m
uint16      accuracy # 0.01 m
uint16      latency  # 0.1 ms
uint8       datum    
#uint8       reserved
uint16      sb_list

# INSNavCartPosStdDev sub-block definition:
# If the Position StdDev field is 1 then this sub block is available:
float32     x_std_dev # m
float32     y_std_dev # m
float32     z_std_dev # m

# INSNavCartPosCov sub-block definition:
# If the Position Cov field is 1 then this sub block is available:
float32     xy_cov # m^2
float32     xz_cov # m^2
float32     yz_cov # m^2

# INSNavCartAtt sub-block definition:
# If the Attitude field is 1 then this sub block is available:
float32     heading # deg
float32     pitch   # deg
float32     roll    # deg

# INSNavCartAttStdDev sub-block definition:
# If the Attitude StdDev field is 1 then this sub block is available:
float32     heading_std_dev # deg
float32     pitch_std_dev   # deg
float32     roll_std_dev    # deg

# INSNavCartAttCov sub-block definition:
# If the Attitude Cov field is 1 then this sub block is available:
float32     heading_pitch_cov # deg^2
float32     heading_roll_cov  # deg^2
float32     pitch_roll_cov    # deg^2

# INSNavCartVel sub-block definition:
# If the Velocity field is 1 then this sub block is available:
float32     vx # m/s
float32     vy # m/S
float32     vz # m/s

# INSNavCartVelStdDev sub-block definition:
# If the Velocity StdDev field is 1 then this sub block is available:
float32     vx_std_dev # m/s
float32     vy_std_dev # m/s
float32     vz_std_dev # m/s

# INSNavCartVelCov sub-block definition:
# If the Velocity Cov field is 1 then this sub block is available:
float32     vx_vy_cov # m^2/s^2
float32     vx_vz_cov # m^2/s^2
float32     vy_vz_cov # m^2/s^2
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: septentrio_gnss_driver/BlockHeader
# Blockheader including time header for all ROS messages that publish SBF blocks

uint8     sync_1
uint8     sync_2
uint16    crc
uint16    id
uint8     revision
uint16    length

uint32    tow # ms since week start
uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     """
  __slots__ = ['header','block_header','gnss_mode','error','info','gnss_age','x','y','z','accuracy','latency','datum','sb_list','x_std_dev','y_std_dev','z_std_dev','xy_cov','xz_cov','yz_cov','heading','pitch','roll','heading_std_dev','pitch_std_dev','roll_std_dev','heading_pitch_cov','heading_roll_cov','pitch_roll_cov','vx','vy','vz','vx_std_dev','vy_std_dev','vz_std_dev','vx_vy_cov','vx_vz_cov','vy_vz_cov']
  _slot_types = ['std_msgs/Header','septentrio_gnss_driver/BlockHeader','uint8','uint8','uint16','uint16','float64','float64','float64','uint16','uint16','uint8','uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,block_header,gnss_mode,error,info,gnss_age,x,y,z,accuracy,latency,datum,sb_list,x_std_dev,y_std_dev,z_std_dev,xy_cov,xz_cov,yz_cov,heading,pitch,roll,heading_std_dev,pitch_std_dev,roll_std_dev,heading_pitch_cov,heading_roll_cov,pitch_roll_cov,vx,vy,vz,vx_std_dev,vy_std_dev,vz_std_dev,vx_vy_cov,vx_vz_cov,vy_vz_cov

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSNavCart, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      if self.gnss_mode is None:
        self.gnss_mode = 0
      if self.error is None:
        self.error = 0
      if self.info is None:
        self.info = 0
      if self.gnss_age is None:
        self.gnss_age = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.accuracy is None:
        self.accuracy = 0
      if self.latency is None:
        self.latency = 0
      if self.datum is None:
        self.datum = 0
      if self.sb_list is None:
        self.sb_list = 0
      if self.x_std_dev is None:
        self.x_std_dev = 0.
      if self.y_std_dev is None:
        self.y_std_dev = 0.
      if self.z_std_dev is None:
        self.z_std_dev = 0.
      if self.xy_cov is None:
        self.xy_cov = 0.
      if self.xz_cov is None:
        self.xz_cov = 0.
      if self.yz_cov is None:
        self.yz_cov = 0.
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.heading_std_dev is None:
        self.heading_std_dev = 0.
      if self.pitch_std_dev is None:
        self.pitch_std_dev = 0.
      if self.roll_std_dev is None:
        self.roll_std_dev = 0.
      if self.heading_pitch_cov is None:
        self.heading_pitch_cov = 0.
      if self.heading_roll_cov is None:
        self.heading_roll_cov = 0.
      if self.pitch_roll_cov is None:
        self.pitch_roll_cov = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.vx_std_dev is None:
        self.vx_std_dev = 0.
      if self.vy_std_dev is None:
        self.vy_std_dev = 0.
      if self.vz_std_dev is None:
        self.vz_std_dev = 0.
      if self.vx_vy_cov is None:
        self.vx_vy_cov = 0.
      if self.vx_vz_cov is None:
        self.vx_vz_cov = 0.
      if self.vy_vz_cov is None:
        self.vy_vz_cov = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      self.gnss_mode = 0
      self.error = 0
      self.info = 0
      self.gnss_age = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.accuracy = 0
      self.latency = 0
      self.datum = 0
      self.sb_list = 0
      self.x_std_dev = 0.
      self.y_std_dev = 0.
      self.z_std_dev = 0.
      self.xy_cov = 0.
      self.xz_cov = 0.
      self.yz_cov = 0.
      self.heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.heading_std_dev = 0.
      self.pitch_std_dev = 0.
      self.roll_std_dev = 0.
      self.heading_pitch_cov = 0.
      self.heading_roll_cov = 0.
      self.pitch_roll_cov = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.vx_std_dev = 0.
      self.vy_std_dev = 0.
      self.vz_std_dev = 0.
      self.vx_vy_cov = 0.
      self.vx_vz_cov = 0.
      self.vy_vz_cov = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH2B2H3d2HBH24f().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.x, _x.y, _x.z, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.x_std_dev, _x.y_std_dev, _x.z_std_dev, _x.xy_cov, _x.xz_cov, _x.yz_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.vx, _x.vy, _x.vz, _x.vx_std_dev, _x.vy_std_dev, _x.vz_std_dev, _x.vx_vy_cov, _x.vx_vz_cov, _x.vy_vz_cov))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.x, _x.y, _x.z, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.x_std_dev, _x.y_std_dev, _x.z_std_dev, _x.xy_cov, _x.xz_cov, _x.yz_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.vx, _x.vy, _x.vz, _x.vx_std_dev, _x.vy_std_dev, _x.vz_std_dev, _x.vx_vy_cov, _x.vx_vz_cov, _x.vy_vz_cov,) = _get_struct_2B2HBHIH2B2H3d2HBH24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH2B2H3d2HBH24f().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.x, _x.y, _x.z, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.x_std_dev, _x.y_std_dev, _x.z_std_dev, _x.xy_cov, _x.xz_cov, _x.yz_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.vx, _x.vy, _x.vz, _x.vx_std_dev, _x.vy_std_dev, _x.vz_std_dev, _x.vx_vy_cov, _x.vx_vz_cov, _x.vy_vz_cov))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 148
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.gnss_mode, _x.error, _x.info, _x.gnss_age, _x.x, _x.y, _x.z, _x.accuracy, _x.latency, _x.datum, _x.sb_list, _x.x_std_dev, _x.y_std_dev, _x.z_std_dev, _x.xy_cov, _x.xz_cov, _x.yz_cov, _x.heading, _x.pitch, _x.roll, _x.heading_std_dev, _x.pitch_std_dev, _x.roll_std_dev, _x.heading_pitch_cov, _x.heading_roll_cov, _x.pitch_roll_cov, _x.vx, _x.vy, _x.vz, _x.vx_std_dev, _x.vy_std_dev, _x.vz_std_dev, _x.vx_vy_cov, _x.vx_vz_cov, _x.vy_vz_cov,) = _get_struct_2B2HBHIH2B2H3d2HBH24f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2HBHIH2B2H3d2HBH24f = None
def _get_struct_2B2HBHIH2B2H3d2HBH24f():
    global _struct_2B2HBHIH2B2H3d2HBH24f
    if _struct_2B2HBHIH2B2H3d2HBH24f is None:
        _struct_2B2HBHIH2B2H3d2HBH24f = struct.Struct("<2B2HBHIH2B2H3d2HBH24f")
    return _struct_2B2HBHIH2B2H3d2HBH24f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
