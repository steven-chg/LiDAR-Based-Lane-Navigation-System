# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from septentrio_gnss_driver/AIMPlusStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class AIMPlusStatus(genpy.Message):
  _md5sum = "85cf4fc2fc2598dca0b9bb856cb2dcdd"
  _type = "septentrio_gnss_driver/AIMPlusStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# AIMPlusStatus message
# ROS message header
std_msgs/Header header

uint32 tow # ms since week start
uint16 wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     

uint8 interference
#-------------------------------
uint8 SPECTRUM_CLEAN         = 0
uint8 INTERFERENCE_MITIGATED = 1
uint8 INTERFERENCE_PRESENT   = 2
#-------------------------------

uint8 spoofing
#--------------------------------------------------------
uint8 NONE_DETECTED                                   = 0
uint8 SPOOFING_DETECTED_BY_OSNMA                      = 1
uint8 SPOOFING_DETECTED_BY_AUTHENTCITY_TEST           = 2
uint8 SPOOFING_DETECTED_BY_OSNMA_AND_AUTHENTCITY_TEST = 3
#--------------------------------------------------------

bool  osnma_authenticating
uint8 galileo_authentic
uint8 galileo_spoofed
uint8 gps_authentic
uint8 gps_spoofed
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  SPECTRUM_CLEAN = 0
  INTERFERENCE_MITIGATED = 1
  INTERFERENCE_PRESENT = 2
  NONE_DETECTED = 0
  SPOOFING_DETECTED_BY_OSNMA = 1
  SPOOFING_DETECTED_BY_AUTHENTCITY_TEST = 2
  SPOOFING_DETECTED_BY_OSNMA_AND_AUTHENTCITY_TEST = 3

  __slots__ = ['header','tow','wnc','interference','spoofing','osnma_authenticating','galileo_authentic','galileo_spoofed','gps_authentic','gps_spoofed']
  _slot_types = ['std_msgs/Header','uint32','uint16','uint8','uint8','bool','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tow,wnc,interference,spoofing,osnma_authenticating,galileo_authentic,galileo_spoofed,gps_authentic,gps_spoofed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AIMPlusStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tow is None:
        self.tow = 0
      if self.wnc is None:
        self.wnc = 0
      if self.interference is None:
        self.interference = 0
      if self.spoofing is None:
        self.spoofing = 0
      if self.osnma_authenticating is None:
        self.osnma_authenticating = False
      if self.galileo_authentic is None:
        self.galileo_authentic = 0
      if self.galileo_spoofed is None:
        self.galileo_spoofed = 0
      if self.gps_authentic is None:
        self.gps_authentic = 0
      if self.gps_spoofed is None:
        self.gps_spoofed = 0
    else:
      self.header = std_msgs.msg.Header()
      self.tow = 0
      self.wnc = 0
      self.interference = 0
      self.spoofing = 0
      self.osnma_authenticating = False
      self.galileo_authentic = 0
      self.galileo_spoofed = 0
      self.gps_authentic = 0
      self.gps_spoofed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IH7B().pack(_x.tow, _x.wnc, _x.interference, _x.spoofing, _x.osnma_authenticating, _x.galileo_authentic, _x.galileo_spoofed, _x.gps_authentic, _x.gps_spoofed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.tow, _x.wnc, _x.interference, _x.spoofing, _x.osnma_authenticating, _x.galileo_authentic, _x.galileo_spoofed, _x.gps_authentic, _x.gps_spoofed,) = _get_struct_IH7B().unpack(str[start:end])
      self.osnma_authenticating = bool(self.osnma_authenticating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IH7B().pack(_x.tow, _x.wnc, _x.interference, _x.spoofing, _x.osnma_authenticating, _x.galileo_authentic, _x.galileo_spoofed, _x.gps_authentic, _x.gps_spoofed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.tow, _x.wnc, _x.interference, _x.spoofing, _x.osnma_authenticating, _x.galileo_authentic, _x.galileo_spoofed, _x.gps_authentic, _x.gps_spoofed,) = _get_struct_IH7B().unpack(str[start:end])
      self.osnma_authenticating = bool(self.osnma_authenticating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_IH7B = None
def _get_struct_IH7B():
    global _struct_IH7B
    if _struct_IH7B is None:
        _struct_IH7B = struct.Struct("<IH7B")
    return _struct_IH7B
