# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from septentrio_gnss_driver/ExtSensorMeas.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import septentrio_gnss_driver.msg
import std_msgs.msg

class ExtSensorMeas(genpy.Message):
  _md5sum = "bc4155d6dac83ebf51ac1aba432000ae"
  _type = "septentrio_gnss_driver/ExtSensorMeas"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# ExtSensorMeas block 
# Block_Number 4050

std_msgs/Header header

# SBF block header including time header
BlockHeader block_header

uint8   n
uint8   sb_length

# ExtSensorMeasSet
uint8[]   source
uint8[]   sensor_model
uint8[]   type
uint8[]   obs_info

#ExtSensorMeasAcceleration
float64 acceleration_x # m/s^2
float64 acceleration_y # m/s^2
float64 acceleration_z # m/s^2

#ExtSensorMeasAngularRate
float64 angular_rate_x # deg/s
float64 angular_rate_y # deg/s
float64 angular_rate_z # deg/s

#ExtSensorMeasVelocity
float32 velocity_x # m/s
float32 velocity_y # m/s
float32 velocity_z # m/s
float32 std_dev_x # m/s
float32 std_dev_y # m/s
float32 std_dev_z # m/s

#ExtSensorMeasInfo
float32 sensor_temperature # deg C

#ExtSensorMeasZeroVelocityFlag
float64 zero_velocity_flag
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: septentrio_gnss_driver/BlockHeader
# Blockheader including time header for all ROS messages that publish SBF blocks

uint8     sync_1
uint8     sync_2
uint16    crc
uint16    id
uint8     revision
uint16    length

uint32    tow # ms since week start
uint16    wnc # weeks since Jan 06, 1980 at 00:00:00 UTC     """
  __slots__ = ['header','block_header','n','sb_length','source','sensor_model','type','obs_info','acceleration_x','acceleration_y','acceleration_z','angular_rate_x','angular_rate_y','angular_rate_z','velocity_x','velocity_y','velocity_z','std_dev_x','std_dev_y','std_dev_z','sensor_temperature','zero_velocity_flag']
  _slot_types = ['std_msgs/Header','septentrio_gnss_driver/BlockHeader','uint8','uint8','uint8[]','uint8[]','uint8[]','uint8[]','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float32','float32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,block_header,n,sb_length,source,sensor_model,type,obs_info,acceleration_x,acceleration_y,acceleration_z,angular_rate_x,angular_rate_y,angular_rate_z,velocity_x,velocity_y,velocity_z,std_dev_x,std_dev_y,std_dev_z,sensor_temperature,zero_velocity_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ExtSensorMeas, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      if self.n is None:
        self.n = 0
      if self.sb_length is None:
        self.sb_length = 0
      if self.source is None:
        self.source = b''
      if self.sensor_model is None:
        self.sensor_model = b''
      if self.type is None:
        self.type = b''
      if self.obs_info is None:
        self.obs_info = b''
      if self.acceleration_x is None:
        self.acceleration_x = 0.
      if self.acceleration_y is None:
        self.acceleration_y = 0.
      if self.acceleration_z is None:
        self.acceleration_z = 0.
      if self.angular_rate_x is None:
        self.angular_rate_x = 0.
      if self.angular_rate_y is None:
        self.angular_rate_y = 0.
      if self.angular_rate_z is None:
        self.angular_rate_z = 0.
      if self.velocity_x is None:
        self.velocity_x = 0.
      if self.velocity_y is None:
        self.velocity_y = 0.
      if self.velocity_z is None:
        self.velocity_z = 0.
      if self.std_dev_x is None:
        self.std_dev_x = 0.
      if self.std_dev_y is None:
        self.std_dev_y = 0.
      if self.std_dev_z is None:
        self.std_dev_z = 0.
      if self.sensor_temperature is None:
        self.sensor_temperature = 0.
      if self.zero_velocity_flag is None:
        self.zero_velocity_flag = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      self.n = 0
      self.sb_length = 0
      self.source = b''
      self.sensor_model = b''
      self.type = b''
      self.obs_info = b''
      self.acceleration_x = 0.
      self.acceleration_y = 0.
      self.acceleration_z = 0.
      self.angular_rate_x = 0.
      self.angular_rate_y = 0.
      self.angular_rate_z = 0.
      self.velocity_x = 0.
      self.velocity_y = 0.
      self.velocity_z = 0.
      self.std_dev_x = 0.
      self.std_dev_y = 0.
      self.std_dev_z = 0.
      self.sensor_temperature = 0.
      self.zero_velocity_flag = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH2B().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb_length))
      _x = self.source
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sensor_model
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.obs_info
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d7fd().pack(_x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.angular_rate_x, _x.angular_rate_y, _x.angular_rate_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.std_dev_x, _x.std_dev_y, _x.std_dev_z, _x.sensor_temperature, _x.zero_velocity_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb_length,) = _get_struct_2B2HBHIH2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sensor_model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.obs_info = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.angular_rate_x, _x.angular_rate_y, _x.angular_rate_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.std_dev_x, _x.std_dev_y, _x.std_dev_z, _x.sensor_temperature, _x.zero_velocity_flag,) = _get_struct_6d7fd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2HBHIH2B().pack(_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb_length))
      _x = self.source
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sensor_model
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.obs_info
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d7fd().pack(_x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.angular_rate_x, _x.angular_rate_y, _x.angular_rate_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.std_dev_x, _x.std_dev_y, _x.std_dev_z, _x.sensor_temperature, _x.zero_velocity_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.block_header is None:
        self.block_header = septentrio_gnss_driver.msg.BlockHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.block_header.sync_1, _x.block_header.sync_2, _x.block_header.crc, _x.block_header.id, _x.block_header.revision, _x.block_header.length, _x.block_header.tow, _x.block_header.wnc, _x.n, _x.sb_length,) = _get_struct_2B2HBHIH2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.source = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.sensor_model = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.obs_info = str[start:end]
      _x = self
      start = end
      end += 84
      (_x.acceleration_x, _x.acceleration_y, _x.acceleration_z, _x.angular_rate_x, _x.angular_rate_y, _x.angular_rate_z, _x.velocity_x, _x.velocity_y, _x.velocity_z, _x.std_dev_x, _x.std_dev_y, _x.std_dev_z, _x.sensor_temperature, _x.zero_velocity_flag,) = _get_struct_6d7fd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2HBHIH2B = None
def _get_struct_2B2HBHIH2B():
    global _struct_2B2HBHIH2B
    if _struct_2B2HBHIH2B is None:
        _struct_2B2HBHIH2B = struct.Struct("<2B2HBHIH2B")
    return _struct_2B2HBHIH2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6d7fd = None
def _get_struct_6d7fd():
    global _struct_6d7fd
    if _struct_6d7fd is None:
        _struct_6d7fd = struct.Struct("<6d7fd")
    return _struct_6d7fd
